head	1.16;
access;
symbols;
locks;
comment	@# @;


1.16
date	2019.01.20.21.41.07;	author -;	state -;
branches;
next	1.15;

1.15
date	2019.01.20.21.27.01;	author -;	state -;
branches;
next	1.14;

1.14
date	2019.01.20.19.31.00;	author -;	state -;
branches;
next	1.13;

1.13
date	2019.01.20.17.43.59;	author -;	state -;
branches;
next	1.12;

1.12
date	2019.01.20.08.40.05;	author -;	state -;
branches;
next	1.11;

1.11
date	2019.01.20.08.36.07;	author -;	state -;
branches;
next	1.10;

1.10
date	2019.01.20.06.39.42;	author -;	state -;
branches;
next	1.9;

1.9
date	2019.01.19.16.13.11;	author -;	state -;
branches;
next	1.8;

1.8
date	2019.01.18.18.48.57;	author -;	state -;
branches;
next	1.7;

1.7
date	2019.01.18.17.25.17;	author -;	state -;
branches;
next	1.6;

1.6
date	2019.01.18.17.21.09;	author -;	state -;
branches;
next	1.5;

1.5
date	2019.01.18.05.37.18;	author -;	state -;
branches;
next	1.4;

1.4
date	2019.01.18.03.04.26;	author -;	state -;
branches;
next	1.3;

1.3
date	2019.01.18.02.54.26;	author -;	state -;
branches;
next	1.2;

1.2
date	2019.01.17.01.15.10;	author -;	state -;
branches;
next	1.1;

1.1
date	2019.01.16.20.59.43;	author -;	state -;
branches;
next	;


desc
@@


1.16
log
@-
@
text
@#!/afs/cats.ucsc.edu/courses/cmps112-wm/usr/racket/bin/mzscheme -qr
;; $Id: sbi.scm,v 1.14 2019-01-20 11:31:00-08 - - $
;; Quang Dang
;; qvdang

(define *stdin* (current-input-port))
(define *stdout* (current-output-port))
(define *stderr* (current-error-port))
;; make hash table
;; *function-table*
(define *function-table* (make-hash) )
(define (function-put key value) 
	(hash-set! *function-table* key value)
)	
(define (function-get key)
	(hash-ref *function-table* key '())
)
;; *label-table*
(define *label-table* (make-hash))
(define (label-put key label)
	(hash-set! *label-table* key label)
)
(define (label-get key)
	(hash-ref *label-table* key #f)
)

;;*variable-table*
(define *variable-table* (make-hash))
(define (variables-put key value)
	(hash-set! *variable-table* key value)
)
(define (variables-get key)
	(hash-ref *variable-table* key #f)
)
;;*array-table*
(define *array-table* (make-hash))
(define (array-put key value)
	(hash-set! *array-table* key value)
)
(define (array-get key)
	(hash-ref *array-table* key #f)
)
;
;;define functions
(define (evaluate-expression expression)
	(when (not (null? expression))
		(cond [(pair? expression)
			(begin
				(apply (function-get (car expression)) (map evaluate-expression (cdr expression)))
			)]
			[(number? expression) expression]
			[(string? expression) expression]
			[else 
				(if (not (equal? (variables-get expression) #f))
					(variables-get expression)
					expression)]
		)
	)
)
;; interpret-printf
(define (interpret-printf expression)
	(when (not(null? expression))
		(if (pair? expression)
			(begin
				(if (string? (car expression))
					(printf (car expression))
					(begin
						(if (string? (evaluate-expression (car expression)))
							(printf (evaluate-expression (car expression)))
							(printf (number->string (evaluate-expression (car expression)))))
					)
				)
				(when (null? (cdr expression))
					(newline)
				)
				(interpret-printf (cdr expression))
			)
			(begin
				(cond [(string? expression) (printf expression)]
					[(number? expression) (printf (number->string expression))]
					[(symbol? expression) (printf (symbol->string expression))]
				[else (usage-error)])
				(newline)
			)
		)
	)					
) 
;; interpret-dim
(define (interpret-dim expression)
	(if (not (equal? (caar expression) 'asub))
		(begin
			(usage-error)
			(display "missing Arrayref in Syntax" *stderr*)
			(newline))
		(begin
			(if (not (number? (evaluate-expression (caddar expression))))
				(usage-error)
				(array-put (cadar expression) (let ((x (make-vector (+ (evaluate-expression (caddar expression)) 1)))) x))
			)
		)
	)
)
;; interpret-let
(define (interpret-let expression) 
	(if (pair? expression)
		(cond [(pair? (car expression));; check for "Memory" whether it is a variable or an Arrayref
			(if (not (equal? (caar expression) 'asub))
				(begin
					(usage-error)
					(display "missing Arrayref in Syntax" *stderr*)
					(newline)
				)
				(begin ;; if it's an Arrayref
					;;check is there a array with the given name in *array-table*
					;;if yes then update the value for it
					(if (equal? (evaluate-expression (car expression)) "No such an array exists")
						(begin 
							(printf (evaluate-expression (car expression)))
						)
						(begin
							(if (not (null? (cddr expression)))
								(usage-error)
								(begin
									(if (> (evaluate-expression (caddar expression)) (vector-length (array-get (cadar expression))))
										(begin 
											(display "Range is out of bound of an array" *stderr*)
											(newline)
										)
										(vector-set! (array-get (cadar expression)) 
											(evaluate-expression (caddar expression)) 
												(evaluate-expression (cadr expression)))))
							)
						)
					)
				)
			)]
			[(symbol? (car expression))
				(begin;; esle it is a variable
					(variables-put (car expression) (evaluate-expression (cadr expression)))
				)]
			[else (usage-error)]
		)
		(begin
			(usage-error)	
			(display "let Memory Expression" *stderr*)
		)
	)
)
	
(define (interpret-goto expression)
	;; expression = label is a symbol
	;; search label in *label-table* if there is such label exist
	;; jump to that line (value associate with that label)
	(when (not(null? expression ))
		(if (symbol? (car expression)) ;; valid label
			(begin
				(if (not (equal? (label-get (car expression)) #f))
					(begin
						(let* ((program (label-get (car expression))))
							(begin	
								(interpret-program program)
								(exit 0)
							))
					)	
					;; label has not found
					(begin
						(display "Label is undefined" *stderr*)
						(newline)
					)
				)
			)
			;;invalid label
			(begin
				(usage-error)
				(display "Label must be a symbol" *stderr*)
				(newline)
			)
		
		)
	)	
)
(define (interpret-if expression)
	(if (pair? (car expression))
		(let ((condition (car expression)) (expr (cdr expression)))
			(if (boolean? (evaluate-expression condition))
				(begin
					(if (evaluate-expression condition)
						(begin
							(if (null? expr)
								(begin
									(usage-error)
									(display "Missing Expression")
									(newline)
								)
								(begin
									;;assume that expression just have one pair (or symbol) after condition
									(cond [(symbol? (car expr)) (interpret-goto expr)]
										[(pair? (car expr)) (evaluate-expression expr)]
										[else (begin
											(usage-error)
											(display "Expression must be a pair or a symbol" *stderr*)
											(newline))]	
									)
								)
							)		
						)
						(begin
							(when (not(null? (cdr expr)))
								(cond [(symbol? (cadr expr)) (evaluate-expression (cdr expr))]
									[(pair? (cadr expr)) (evaluate-expression (cadr expr))]
									[else (begin
										(usage-error)
										(display "Expression must be a pair or a symbol" *stderr*)
										(newline))]
								)
							
							)
						)
					)	
				)
				(begin
					(display "Condition expression must be return boolean" *stderr*)
					(newline)
				)
			)
		)	
		(begin
			(usage-error)
			(display "Missing condition on If statement")
			(newline)
		)
	)
)
(define len (lambda (l)
	(define len.. (lambda (l.. n)
		(if (null? l..) n
			(len (cdr l) (+ n 1))))
	)
	(len.. l 0))
)

(define (interpret-input expression)	
	(define (input-get expr)
		(when (not (null? (car expr)))
			(let ((x (read)))
			(cond 	[(eof-object? x) (let* ((y (variables-get 'nan))) (begin (variables-put 'eof 1) y))] 
				[(number? x) (variables-put (car expr) x)]
				[else ;; input is not a number
					(let* ((y (variables-get 'nan))) (variables-put (car expr) y))])
			)
			(when (not(null? (cdr expr)))
				(input-get (cdr expr))
			)
		)
	)
	(if (null? expression)
		(usage-error)
		(input-get expression)
	)
)
;; Implement functions
(for-each (lambda (pair)
	(function-put (car pair) (cadr pair)))
	`(
		(dim ,interpret-dim)
		(let ,interpret-let)
		(goto ,interpret-goto)
		(if ,interpret-if)
		(print ,interpret-printf)
		(input ,interpret-input)
		(= ,=)
		(< ,<)
		(> ,>)
		(<= ,<=)
		(>= ,>=)
		(<> ,(lambda (x y) (not(equal? x y))))
		(+ ,+)
		(- ,-)

		(* ,(lambda (x y) (if (or (not(number? (evaluate-expression x))) (not(number? (evaluate-expression y))))
					(begin	(display "Variable is undefined" *stderr*) (newline))
					(* (evaluate-expression x) (evaluate-expression y)))))
		(/ ,(lambda (x y) (if (or (not(number? (evaluate-expression x))) (not(number? (evaluate-expression y))))
					(begin (display "Variable is undefined" *stderr*) (newline))
					(/ (evaluate-expression x) (if (equal? (evaluate-expression y) 0) 0.0 
						(evaluate-expression y)))))) 
		(^ ,(lambda (x y) (if (or (not(number? (evaluate-expression x))) (not(number? (evaluate-expression y))))
					(begin	(display "Variable is undefined" *stderr*) (newline))
					(expt (evaluate-expression x) (evaluate-expression y)))))		
		(exp ,exp)
		(abs ,abs)
		(round ,round)
		(% ,(lambda (x y) (- x (* (floor (/ x y)) y))))
		(quot ,(lambda (x y) (truncate (/ x y))))
		(rem ,(lambda (x y) (- x (* (truncate (/ x y)) y))))
		(ceil ,ceiling)
		(floor ,floor)
		(log ,(lambda (x) (log (if (equal? 0 x )0.0 x))))
		(sqrt ,sqrt)
		(sin ,sin) (cos ,cos) (tan ,tan)
		(asin ,asin) (acos ,acos) (atan ,(lambda (x) (atan (if (equal? x 0) 0.0 x))))
		(asub ,(lambda (x y) (begin
				(if (not (equal? (array-get x) #f))
					(vector-ref (array-get x) (evaluate-expression y))
					"No such an array exists"))))
	)
)
;; define special variable
(for-each (lambda (pair) 
	(variables-put (car pair) (cadr pair)))
	`(
		(pi ,3.141592653589793238462643383279502884197169399)
		(e ,2.718281828459045235360287471352662497757247093)
		(nan ,(/ 0.0 0.0))
		(eof ,0.0)
	)
)
(define *runfile* 
	(let-values
		(((dirpath basepath root?)
			(split-path (find-system-path 'run-file))))
		(path->string basepath))
)

(define (die list)
	(for-each (lambda (item) (display item *stderr*)) list)
	(newline)
	(exit 1)
)
(define (error-message message)
	((lambda (item) (display item *stderr*)) message)
	(newline)
)
(define (usage-error)
	(error-message `("Syntax error"))
)
(define (usage-exit)
	(die `("Usage:" ,*runfile* "filename"))
)

(define (readlist-from-inputfile filename) 
	(let ((inputfile (open-input-file filename)))
		(if (not (input-port? inputfile))
			(die `(,*runfile* ,filename ": open failed"))
			(let ((program (read inputfile)))
				(close-input-port inputfile)
					program)))
)
(define (execute expression)
	(when (not(null? expression))	
		;;check for valid expression and execute it 
		;;otherwise print the error
		(if (not(equal? (function-get (car expression)) '()))
			(begin
				(let ((expr (cdr expression)))
					(begin
						((function-get (car expression)) expr)
					)
				)
			)
			(begin
				(usage-error)
				(display "No such function in *function-table*")
				(newline)
			)
		)
	)
)
(define (interpret-program expression)
	(let* ((program expression)) 
	(when (pair? program)
		(when (not(null? (car program)))
			(if (null? (cdar program))
				(begin
					
					(interpret-program (cdr program))
				)
				(begin
					(let ((line (car program)))
						(when (not (null? (cdr line)))
							(cond [(pair?(cadr line))
								(begin
									(execute (cadr line))
								)]
								[(symbol? (cadr line))
								(begin
									(when (not (null? (cddr line)))
										(execute (caddr line)))
								)]
								[else 
									(begin
										(display "Control transfer must be Symbol" *stderr*)
										(newline)
								)]	
							)
						)
					)
					(interpret-program (cdr program))
				)			
			)
		)
	))
)
(define (add_label _list)
	(begin
		(let (( label (if (not (null? (cdar _list)))
				(if (symbol? (cadar _list))
					(cadar _list)
					'())
			'()))) (when (not(equal? label '())) 
					(begin
						(label-put label  _list)
					))
		)
		(when (not (null? (cdr _list)))
			(add_label (cdr _list)))
	)
)
(define (main args)
	(if (or (null? args) (not (null? (cdr args))))
		(usage-exit)
		(let* ((subprog (car args))
			(program (readlist-from-inputfile subprog)))
				;;checking for a label in each line and put it
				;; into the *lable-table*
				(begin
					(add_label program)	
					(interpret-program program)
				)
		)
	)
)

(main (vector->list (current-command-line-arguments)))	
@


1.15
log
@-
@
text
@d434 1
a434 5
(when (terminal-port? *stdin*)
	(main (vector->list (current-command-line-arguments)))
)	


@


1.14
log
@-
@
text
@d2 1
a2 1
;; $Id: sbi.scm,v 1.13 2019-01-20 09:43:59-08 - - $
d96 4
a99 1
			(array-put (cadar expression) (let ((x (make-vector (evaluate-expression (caddar expression))))) x))
d242 4
a245 6
(define (interpret-input expression)
	(if (null? expression)
		(usage-error)
		(begin
			(let ((x (read))) (display "Object: ")
					(display x) 
d247 1
a247 26
				[(number? x)	
				(cond 	[(symbol? (car expression)) (variables-put (car expression) x)]
					[(pair? (car expression))
					(begin 
					(if (equal? (evaluate-expression (car expression)) "No such an array exists")
						(begin
							(display (evaluate-expression (car expression)))
							(newline)
						)
						(begin
							(if (> (len x) (vector-length (evaluate-expression (car expression))))
								(begin
									(display "Range is out of an array" *stderr*)
									(newline)
								)
								(begin
									(vector-set! (evaluate-expression (car expression)) 
										(evaluate-expression (caddar expression))
											x)
								)
							)	
						)
					))]
						
					[else (usage-error)]
				)]
d249 4
a252 27
					(begin
						(let* ((y (variables-get 'nan)))
						(cond [(eof-object? x) (let* ((x (variables-get 'nan))) (variables-put 'eof 1))]
							[(symbol? (car expression)) (variables-put (car expression) y)]
							[(pair? (car expression))
							(begin 
							(if (equal? (evaluate-expression (car expression)) "No such an array exists")
								(begin
									(display (evaluate-expression (car expression)))
									(newline)
								)
								(begin
									(if (> (len x) (vector-length (evaluate-expression (car expression))))
										(begin
											(display "Range is out of an array" *stderr*)
											(newline)
										)
										(begin
											(vector-set! (evaluate-expression (car expression)) 
												(evaluate-expression (caddar expression))
													x)
										)
									)		
								)
							))]
							[else (usage-error)]
						)))])
d256 4
d279 11
a289 3
		(* ,*)
		(/ ,(lambda (x y) (/ x (if (equal? 0 y) 0.0 y))))
		(^ ,expt)
@


1.13
log
@-
@
text
@d2 1
a2 1
;; $Id: sbi.scm,v 1.12 2019-01-20 00:40:05-08 - - $
d243 7
a249 4
			(let ((x (read))) 
			(cond [(symbol? (car expression)) (variables-put (car expression) x)]
				[(pair? (car expression)) 
				(begin 
d268 3
a270 1
					)
d272 29
a300 1
			))
@


1.12
log
@-
@
text
@d2 1
a2 1
;; $Id: sbi.scm,v 1.11 2019-01-20 00:36:07-08 - - $
d389 2
a390 4
									(if (null? (cddr line))
										(exit 0)
										(execute (caddr line))
									)
@


1.11
log
@-
@
text
@d2 1
a2 1
;; $Id: sbi.scm,v 1.10 2019-01-19 22:39:42-08 - - $
d157 4
a160 1
							(interpret-program program))
@


1.10
log
@-
@
text
@d2 1
a2 1
;; $Id: sbi.scm,v 1.9 2019-01-19 08:13:11-08 - - $
d121 9
a129 3
									(vector-set! (array-get (cadar expression)) 
										(evaluate-expression (caddar expression)) 
											(evaluate-expression (cadr expression)))))
d228 8
d237 30
a266 1
	(display "interpret-input")
d313 2
@


1.9
log
@-
@
text
@d2 1
a2 1
;; $Id: sbi.scm,v 1.8 2019/01/18 18:48:57 - - $
d142 27
a168 1
	(display "interpret-go")
d171 50
a220 1
	(display "interpret-if")
d247 2
d284 1
a284 1
(define (error message)
d307 1
a307 1
		(if (not(equal? (function-get (car expression)) #f))
d323 3
a325 2
(define (interpret-program program)
	(when (not(null? program))
d329 1
d333 7
a339 8
					;; if there is no label
					(cond [(pair? (cadar program))
						(begin
							(execute (cadar program))	
						)]	
					;; there is label
						[(symbol? (cadar program))
							(let ((expression (cddar program)))
d341 3
a343 2
									(when (not (null? expression))
								 		(execute (car expression))
d345 6
a350 1
								)
a351 6
						]
					;;else
					
					[else 
						(begin
							(usage-error)
d353 2
a354 2
					])	
					(interpret-program (cdr program))	
d358 1
a358 1
	)
@


1.8
log
@-
@
text
@d2 1
a2 1
;; $Id: sbi.scm,v 1.7 2019-01-18 09:25:17-08 - - $
d46 8
a53 6
	(if (pair? expression)
		(begin
			(apply (function-get (car expression)) (map evaluate-expression (cdr expression)))
		)
		(cond ((number? expression) expression)
			(else 
d56 2
a57 1
					expression)))
d63 22
a84 9
		(begin
			(if (string? (car expression))
				(printf (car expression))
				(begin
					(if (string? (evaluate-expression (car expression)))
						(printf (evaluate-expression (car expression)))
						(printf (number->string (evaluate-expression (car expression)))))
					(newline)))
			(interpret-printf (cdr expression))
d92 2
a93 1
			(display "missing Arrayref in Syntax")
d102 2
a103 2
	(begin
		(if (pair? (car expression));; check for "Memory" whether it is a variable or an Arrayref
d105 5
a109 1
				(display "missing Arrayref in Syntax")
d119 1
a119 1
								(display "Syntax error")
d127 10
a136 4
			)
			(begin;; esle it is a variable
				(variables-put (car expression) (evaluate-expression (cadr expression)))
			)
d207 7
a213 1

d226 19
a244 2
(define (statement in)
	(function-get in)
d248 32
a279 11
	(if (null? (cdar program));; if statement on the line is null recursively call interpret-program
		(interpret-program (cdr program))
		;;else look up the keyword in the statement hash and
		;; call interpret-statement
		(begin
			(when (not (eq? (statement (caadar program)) '()));; if statement is found, 
				(cond ((procedure? (statement (caadar program))) 
					((statement (caadar program)) (cdr(cadar program)))))
					(when (not(null? (cdr program)))
						(interpret-program (cdr program))))
		))
d306 1
a306 1
					(interpret-program (program))
@


1.7
log
@-
@
text
@d2 1
a2 1
;; $Id: sbi.scm,v 1.5 2019-01-17 21:37:18-08 - - $
d211 15
d233 6
a238 5
				(display program)
			(for-each (lambda (item) 		
				(when (not(null? (cdr item)))
					(label-put (caadr item) (car item)))) program)
			(interpret-program program)))	
@


1.6
log
@-
@
text
@d218 1
@


1.5
log
@-
@
text
@d2 1
a2 1
;; $Id: sbi.scm,v 1.4 2019-01-17 19:04:26-08 - - $
d47 3
a49 1
		(apply (function-get (car expression)) (map evaluate-expression (cdr expression)))
d51 4
a54 1
			(else (variables-get expression)))
d64 3
a66 1
					(printf (number->string (evaluate-expression (car expression))))
d74 8
a81 2
	(variables-put (caar expression) (make-vector (evaluate-expression (cadar expression))))
	(function-put (caar expression) (lambda (x) (vector-ref (variables-get (caar expression)) (- x 1))))
d85 25
a109 6
	(if (pair? (car expression));; check for "Memory" whether it is a variable or an array
		(begin ;; if it's an array
			
		)
		(begin;; esle it is a variable
			(variables-put (car expression) (evaluate-expression (cadr expression)))
d154 4
@


1.4
log
@-
@
text
@d2 1
a2 1
;; $Id: sbi.scm,v 1.3 2019-01-17 18:54:26-08 - - $
d33 1
a33 1
	(hash-ref *variable* key #f)
d45 7
a51 1

d58 3
a60 1
				(printf (value (car expression))))
a61 1
			(newline)
a65 6
(define (Arrayref expression)
	(if (eq? (car expression) 'asub)
		(display (cadr expression))
		(display (caddr expression))
	)
)
d67 2
a68 2

	(display (Arrayref expression))
d72 8
a79 2
;;	(if (pair? (car expression))
	(display "hello")
d81 1
d110 1
a110 1
		(/ ,/)
d112 1
d114 1
a114 1
		(quot ,(lambda (x y) (truncate (/ x y)))
d118 1
a118 1
		(log ,log)
d121 9
a129 2
		(asin ,asin) (acos ,acos) (atan ,atan)
		
a131 1
;
d161 1
d172 1
a172 1
		)
@


1.3
log
@-
@
text
@d2 1
a2 1
;; $Id: sbi.scm,v 1.1 2019/01/16 20:59:43 - - $
d91 2
d99 15
a113 2
		(print ,interpret-printf)
		(input ,interpret-input)
a115 1

@


1.2
log
@-
@
text
@d18 8
d27 7
a33 6
;;define functions
(define (error list)
	(begin
		((lambda (item) (display item *stderr*)) list)
		(newline)
	)
d35 4
a38 2
(define (usage-error)
	(error `("Syntax error"))
d40 6
d48 9
a56 19
	(if (null? (cdr expression))
		(usage-error)
		(if (pair? (cadr expression))
			;;after 'print' is expression
			(begin
				(display (cadr expression))
				(newline))
			;; else
			(begin
				(if (number? (cadr expression))
					(begin
						(printf (number->string (cadr expression)))
						(newline))
					(begin
						(printf (cadr expression))
						(newline))
				))
		)	
	)
a57 1
	
d71 8
a78 1
	(display "interpret-let")
d80 4
d87 10
d98 1
d102 1
a102 25
;; *label-table*
(define *label-table* (make-hash))
(define (label-put key label)
	(hash-set! *label-table* key label)
)
(define (label-get key)
	(hash-ref *label-table* key #f)
)

;;*variable-table*
(define *variable-table* (make-hash))
(define (variables-put key value)
	(hash-set! *variable-table* key value)
)
(define (variables-get key)
	(hash-ref *variable* key #f)
)
;;*array-table*
(define *array-table* (make-hash))
(define (array-put key value)
	(hash-set! *array-table* key value)
)
(define (array-get key)
	(hash-ref *array-table* key #f)
)
a115 1

d132 10
a141 15
	(if (null?(cdr program))
		(exit 0)
		(if (null? (cdar program));; if statement on the line is null recursively call interpret-program
			(interpret-program (cdr program))
			;;else look up the keyword in the statement hash and
			;; call interpret-statement
			(begin
				(when (not (eq? (statement (caadar program)) '()));; if statement is found, 
					(cond ((procedure? (statement (caadar program))) 
						((statement (caadar program)) (cadar program)))))
				(if (not(null? (cdr program)))
					(interpret-program (cdr program))
					(exit 0)
				)
			)
d143 1
a143 2
	)	

d153 3
a155 3
					(when (not(null? (cdr item))) 
						(label-put (car item) (caadr item)))) program)
				(interpret-program program)))	
@


1.1
log
@-
@
text
@d2 1
a2 1
;; $Id$
d20 9
a28 1

d31 19
a49 3
	(if (string? expression)
		(printf expression)
		(display expression))
d51 1
d112 1
d129 15
a143 10
	(if (null? (cdar program));; if statement on the line is null recursively call interpret-program
		(interpret-program (cdr program))
		;;else look up the keyword in the statement hash and
		;; call interpret-statement
		(begin
			(when (not (eq? (statement (caadar program)) '()));; if statement is found, 
				(cond ((procedure? (statement (caadar program))) 
					((statement (caadar program)) (cdr(cadar program)))))
					(when (not(null? (cdr program)))
						(interpret-program (cdr program))))
d145 2
a146 1
	)
@
